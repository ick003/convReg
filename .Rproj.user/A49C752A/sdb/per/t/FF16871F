{
    "collab_server" : "",
    "contents" : "#### Functions used for EDA and CPP ####\n\ndistribution.list <- function()\n{\n   # return the list of supported distribution\n   return ( c('Pois','Nbinom','CoMPoisson','ZIP','HP','Binom','Multinom','Gauss','Lnorm', 'Gamma') )\n}\n\n##### Useful functions ####\n\n#' Zero-truncated Poisson distribution\n#' @param N sample size\n#' @param lambda mean Poisson parameter\n#' @keywords truncated Poisson\n#' @export\nrtpois <- function(N, lambda){qpois(runif(N, dpois(0, lambda), 1), lambda)}\n\npkolmogorov1x <- function(x, n) {\n   if (x <= 0){return(0)}\n   if (x >= 1){return(1)}\n   j <- seq.int(from = 0, to = floor(n * (1 - x)))\n   xj = x + j/n\n   xj[which.min(xj)] <- max(min(xj), 0.0001)\n   xj[which.max(xj)] <- min(max(xj), 0.9999)\n   1 - x * sum(exp(lchoose(n, j) + (n - j) * log(1 - (xj)) + (j - 1) * log(xj)))\n}\n\n\n#' Kolmogorov-Smirnov distribution\n#' @param y sample values\n#' @param n degree of freedom\n#' @export\ndks = function(y,n){\n   pks1 = sapply(y,function(x) pkolmogorov1x(x,n))\n   pks2 = pks1[2:length(pks1)]\n   return(pks2 - pks1[1:(length(pks1)-1)])\n}\n\ndZ.lam = function(lambda,nu){\n   dZ = colSums(matrix(unlist(lapply(1:99,function(k){exp(log(k)+ log(lambda)*k - nu*sum(log(1:k)))})), nrow=99, byrow=T))\n   dZ[lambda==0]=0\n   dZ[which(is.nan(dZ))] = 10^100\n   dZ[which(dZ > 10^100)] = 10^100\n   dZ[which(dZ < -10^100)] = -10^100\n   return(dZ)\n\n}\n\nZcomp = function(lambda,nu){\n   nu[nu==Inf] = 10^6\n   lambda[lambda == Inf] = 10^6\n   Z = colSums(matrix(unlist(lapply(0:99,function(k){exp( log(lambda)*k - nu*log(factorial(k)))})), nrow=100, byrow=T))\n   Z[lambda==0]=0\n   Z[which(Z > 10^100)] = 10^100\n   Z[which(is.nan(Z))] = 10^100\n   Z[which(Z < -10^100)] = -10^100\n   return(Z)\n\n}\n\nZcomp.mu = function(lambda,nu){\n   nu[nu==Inf] = 10^6\n   lambda[lambda == Inf] = 10^6\n   Z.mu = colSums(matrix(unlist(lapply(1:99,function(k){exp(log(k) + log(lambda)*k - nu*sum(log(1:k)))})), nrow=99, byrow=T))/Zcomp(lambda,nu)\n   Z.mu[lambda==0]=0\n   Z.mu[which(is.nan(Z.mu))] = 10^100\n\n   return(Z.mu)\n}\n\ndZ.nu = function(lambda,nu){\n   dZ= colSums(matrix(unlist(lapply(0:150,function(k){log(factorial(k))* lambda^k * ((factorial(k))^-nu)})), nrow=151, byrow=T))\n   dZ[which(dZ > 10^100)] = 10^100\n   dZ[which(is.nan(dZ))] = 10^100\n   dZ[which(dZ < -10^100)] = -10^100\n   return(dZ)\n\n}\n\ndcom2 = function(x,lambda,nu){\n\n   #x.t = matrix(unlist(lapply(0:100,function(k){lambda^k * ((factorial(k))^-nu)})), nrow=101, byrow=T)\n\n   return(lambda^x * (factorial(x))^-nu)\n\n}\n\n.dCoMPoissonLnorm <- function(x,mu,size,mug,sigmag,log=F){\n\n   if(length(mu)==1){\n      res = dlnorm(matrix(kronecker(x,0:100,FUN=\"-\"), ncol=101, byrow=T),mug,sigmag) %*% dcom(0:100,nu=size,lambda=mu)\n   }else{\n      rd.p = 0:100\n      yx = cbind(x,mu,size,mug,sigmag)\n      res = apply(yx,1,function(x) sum(dlnorm(x[1]-rd.p,x[4], x[5])*dcom(rd.p,nu=x[3],lambda = x[2])))\n      res = sapply(res,function(x) max(x,10^(-300)))\n   }\n   res[is.nan(res)] = 10^(-300)\n   if(log==T){res=log(res)}\n   return(res)\n\n}\n\ndTCoMPoissonGauss <- function(x,mu,size,mug,sigmag,k.max,f.k,j){\n   rd.p = 0:k.max\n   yx = cbind(x,mu,size,mug,sigmag)\n   if(j == 1){res = apply(yx,1,function(x) sum(dnorm(x[1]-rd.p,x[4], x[5])*dcom(rd.p,nu=x[3],lambda = x[2])*rd.p))}\n   if(j == 2){res = apply(yx,1,function(x) sum(dnorm(x[1]-rd.p,x[4], x[5])*dcom(rd.p,nu=x[3],lambda = x[2])*log(factorial(rd.p))))}\n   if(j ==3){res = apply(yx,1,function(x) sum(dnorm(x[1]-rd.p,x[4], x[5])*dcom(rd.p,nu=x[3],lambda = x[2])*(x[1]-rd.p)))}\n   if(j ==4){res = apply(yx,1,function(x) sum(dnorm(x[1]-rd.p,x[4], x[5])*dcom(rd.p,nu=x[3],lambda = x[2])*(x[1]-rd.p)^2))}\n\n   res1 = sapply(res,function(x) max(x,10^(-300)))\n   res1[which(is.nan(res1))]=10^(100)\n\n   return(res1)\n}\n\n.dkCoMPoissonGauss <- function(x,mu,size,mug,sigmag,k){\n   if(length(k)==1){\n      res=dnorm(x-k,mug, sigmag)*dcomp(k,nu=size,lam = mu)\n   }\n   if(length(k)>1){\n      res = matrix(NA,nrow=length(x), ncol = length(k))\n      for(j in 1:length(x)){\n         dd = dcom2(0:99,mu[j],size[j])\n         res[j,] = dnorm(x[j]-k,mug[j], sigmag[j])*dd[k+1]/sum(dd)\n      }\n   }\n   res[is.nan(res)] = 0\n   return(res)\n}\n\n.dkCoMPoissonLnorm <- function(x,mu,size,mug,sigmag,k){\n   if(length(k)==1){\n      res=dlnorm(x-k,mug, sigmag)*dcomp(k,nu=size,lam = mu)\n   }\n   if(length(k)>1){\n      res = matrix(NA,nrow=length(x), ncol = length(k))\n      for(j in 1:length(k)){\n         res[,j] = dlnorm(x-k[j],mug, sigmag)*dcomp(k[j],nu=size,lam = mu)\n      }\n   }\n   res[which(is.nan(res))] = 10^(-300)\n   return(res)\n}\n\n.dkBinomLnorm <- function(x,size,prob,mug,sigmag,k){\n   if(length(k)==1){\n      res=dlnorm(x-k,mug, sigmag)*dbinom(k,size=size,prob = prob)\n   }\n   if(length(k)>1){\n      res = matrix(NA,nrow=length(x), ncol = length(k))\n      for(j in 1:length(k)){\n         res[,j] = dlnorm(x-k[j],mug, sigmag)*dbinom(k[j],size=size,prob = prob)\n      }\n   }\n   res[which(is.nan(res))] = 10^(-300)\n   return(res)\n}\n\n.dCoMPoissonGauss <- function(x,mu,size,mug,sigmag,log=F){\n   if(length(mu)==1){\n      res = dnorm(matrix(kronecker(x,0:100,FUN=\"-\"), ncol=101, byrow=T),mug,sigmag) %*% dcom(0:100,nu=size,lambda=mu)\n   }else{\n      res = rep(0,length(x))\n      for(i in 1:length(x)){\n         dd = dcom2(0:99,mu[i],size[i])\n         res[i] = sum(dnorm(x[i]-0:99-mug[i],0,sigmag[i])*dd/sum(dd))\n      }\n      res[is.nan(res)] = 0\n   }\n   res = sapply(res,function(x) max(x,10^(-300)))\n   if(log==T){res=log(res)}\n   return(res)\n\n}\n\n.dkZIPGauss <- function(x,mu,size,mug,sigmag,k){\n   if(length(k)==1){\n      res=dnorm(x-k,mug, sigmag)*dZIP(k,pi=mu,lam = size)\n   }\n   if(length(k)>1){\n      res = matrix(NA,nrow=length(x), ncol = length(k))\n      for(j in 1:length(x)){\n         dd = dZIP(k,pi=mu[j],lam = size[j])\n         res[j,] = dnorm(x[j]-k,mug[j], sigmag[j])*dd[k+1]/sum(dd)\n      }\n   }\n   res[is.nan(res)] = 0\n   return(res)\n}\n\n############################### Gauss ###############################\n\n#### Pois / Gauss ####\n\n#' Poisson and Gaussian convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrPoisGauss <- function(N,mu,size,mug,sigmag){\n   rnb.sim = rpois(N,mu)\n   LOS.sim = rnb.sim + rnorm(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' Poisson and Gaussian convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npPoisGauss <- function(q,mu,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      res = sum(pnorm(q-rd.p,mug, sigmag)*dpois(rd.p, mu))\n   }\n   if(length(q)>1){\n      x=q\n      res = sapply(x,function(x) sum(pnorm(x-rd.p,mug,sigmag)*dpois(rd.p, mu)))\n   }\n   return(res)\n}\n\n#' Poisson and Gaussian convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqPoisGauss <- function(p,mu,size,mug,sigmag){\n\n   if(length(mu)==1){\n      sample = rPoisGauss(100000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(mu)>1){\n      q = NULL\n      for(i in 1:length(mu)){\n         sample = rPoisGauss(100000,mu[i],sigma[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n   return(q)\n\n}\n\n##### Nbinom / Gauss #####\n\n#' Negative binomial and Gaussian convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrNbinomGauss <- function(N,mu,size,mug,sigmag){\n   rnb.sim = rnbinom(N,size=size,mu=mu)\n   LOS.sim = rnb.sim + rnorm(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' Negative binomial and Gaussian convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npNbinomGauss <- function(q,mu,size,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      res = sum(pnorm(q-rd.p,mug, sigmag)*dnbinom(rd.p,size=size,mu = mu))\n   }\n   if(length(q)>1){\n         res = sapply(q,function(x) sum(pnorm(x-rd.p,mug,sigmag)*dnbinom(rd.p,size=size,mu = mu)))\n   }\n   return(res)\n}\n\n#' Negative binomial and Gaussian convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqNbinomGauss <- function(p,mu,size,mug,sigmag){\n\n   if(length(mu)==1){\n   sample = rNbinomGauss(100000,mu,size,mug,sigmag)\n   q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(mu)>1){\n      q = NULL\n      for(i in 1:length(mu)){\n         sample = rNbinomGauss(100000,mu[i],size[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n   return(q)\n\n}\n\n#### CoMP / Gauss ####\n\n#' CoMP and Gaussian convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrCoMPoissonGauss <- function(N,mu,size,mug,sigmag){\n   if(length(mu)==1){\n      rnb.sim = rcom(N,nu=size,lambda=mu)\n   }else{\n      rnb.sim = apply(cbind(mu,size), 1, function(x) rcomp(N/length(mu),lam = x[1],nu=x[2]))\n   }\n   LOS.sim = c(t(rnb.sim)) + rnorm(N,mug,sigmag)\n\n\n   return(LOS.sim)\n\n}\n\n#' CoMP and Gaussian convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npCoMPoissonGauss <- function(q,mu,size,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      res = sum(pnorm(q-rd.p,mug, sigmag)*dcomp(rd.p,nu=size,lam = mu,sumTo = 50), na.rm=T)\n   }\n   if(length(q)>1){\n      x=q\n      res = sapply(x,function(x) sum(pnorm(x-rd.p,mug,sigmag)*dcomp(rd.p,nu=size,lam = mu,sumTo = 50), na.rm=T))\n   }\n   return(res)\n\n}\n\n#' CoMP and Gaussian convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqCoMPoissonGauss <- function(p,mu,size,mug,sigmag){\n\n   if(length(mu)==1){\n      sample = rCoMPoissonGauss(10000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(mu)>1){\n      q = NULL\n      for(i in 1:length(mu)){\n         sample = rCoMPoissonGauss(10000,mu[i],size[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n   return(q)\n\n}\n\n#### ZIP / Gauss ####\n\n#' ZIP and Gaussian convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrZIPGauss <- function(N,mu,size,mug,sigmag){\n   zip = rbinom(N,1,size)\n   rnb.sim = rpois(N,mu)\n   rnb.sim[which(zip == 1)] = 0\n   LOS.sim = rnb.sim + rnorm(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' ZIP and Gaussian convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npZIPGauss <- function(q,mu,size,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      res = sum(pnorm(q-rd.p,mug, sigmag)*dZIP(rd.p, mu, size))\n   }\n   if(length(q)>1){\n      x=q\n      res = sapply(x,function(x) sum(pnorm(x-rd.p,mug,sigmag)*dZIP(rd.p, mu, size)))\n   }\n   return(res)\n}\n\n#' ZIP and Gaussian convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqZIPGauss <- function(p,mu,size,mug,sigmag){\n\n   if(length(mu)==1){\n      sample = rZIPGauss(100000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(mu)>1){\n      q = NULL\n      for(i in 1:length(mu)){\n         sample = rZIPGauss(100000,mu[i],size[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n   return(q)\n\n}\n\n#### HP / Gauss ####\n\n#' HP and Gaussian convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param pi parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrHPGauss <- function(N,mu,pi,mug,sigmag){\n   hp = rbinom(N,1,pi)\n   rnb.sim = rtpois(N,mu)\n   rnb.sim[which(hp == 1)] = 0\n   LOS.sim = rnb.sim + rnorm(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' HP and Gaussian convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npHPGauss <- function(q,mu,size,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      res = sum(pnorm(q-rd.p,mug, sigmag)*dHP(rd.p, mu, pi = size))\n   }\n   if(length(q)>1){\n      x=q\n      res = sapply(x,function(x) sum(pnorm(x-rd.p,mug,sigmag)*dHP(rd.p, mu, pi = size)))\n   }\n   return(res)\n}\n\n#' HP and Gaussian convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqHPGauss <- function(p,mu,size,mug,sigmag){\n\n   if(length(mu)==1){\n      sample = rHPGauss(100000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(mu)>1){\n      q = NULL\n      for(i in 1:length(mu)){\n         sample = rHPGauss(100000,mu[i],size[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n   return(q)\n\n}\n\n#### Binom / Gauss ####\n\n#' Binomial and Gaussian convolution\n#' @param N sample size\n#' @param prob parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrBinomGauss <- function(N,prob,size,mug,sigmag){\n   rb.sim = rbinom(N,size=size,prob=prob)\n   LOS.sim = rb.sim + rnorm(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' Binomial and Gaussian convolution\n#' @param q quantiles\n#' @param prob parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npBinomGauss <- function(q,prob,size,mug,sigmag){\n\n   rd.p = 0:max(20,size)\n   if(length(q)==1){\n      res = sum(pnorm(q-rd.p,mug, sigmag)*dbinom(rd.p,size=size,prob = prob))\n   }\n\n   if(length(q)>1){\n     res = sapply(q,function(x) sum(pnorm(x-rd.p,mug,sigmag)*dbinom(rd.p,size=size,prob = prob)))\n   }\n   return(res)\n}\n\n#' Binomial and Gaussian convolution\n#' @param p probabilities\n#' @param prob parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqBinomGauss <- function(p,prob,size,mug,sigmag){\n\n   if(length(size)==1){\n      sample = rBinomGauss(100000,size=size,prob=prob,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(size)>1){\n      q = NULL\n      for(i in 1:length(size)){\n         sample = rBinomGauss(100000,size=size[i],prob=prob[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n\n   return(q)\n\n}\n\n############################## Lnorm ################################\n\n#### Pois / Lnorm ####\n\n#' Poisson and Log-Gaussian convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrPoisLnorm <- function(N,mu,size,mug,sigmag){\n   rnb.sim = rpois(N,mu)\n   LOS.sim = rnb.sim + rlnorm(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' Poisson and Log-Gaussian convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npPoisLnorm <- function(q,mu,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      res = sum(plnorm(q-rd.p,mug, sigmag)*dpois(rd.p, mu))\n   }\n   if(length(q)>1){\n     x=q\n     res = sapply(x,function(x) sum(plnorm(x-rd.p,mug,sigmag)*dpois(rd.p, mu)))\n   }\n   return(res)\n\n}\n\n#' Poisson and Log-Gaussian convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqPoisLnorm <- function(p,mu,size,mug,sigmag){\n\n   if(length(mu)==1){\n      sample = rPoisLnorm(100000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(mu)>1){\n      q = NULL\n      for(i in 1:length(mu)){\n         sample = rPoisLnorm(100000,mu[i],sigma[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n   return(q)\n\n}\n\n#### Nbinom / Lnorm ####\n\n#' Negative binomial and Log-Gaussian convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrNbinomLnorm <- function(N,mu,size,mug,sigmag){\n   rnb.sim = rnbinom(N,size=size,mu=mu)\n   LOS.sim = rnb.sim + rlnorm(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' Negative binomial and Log-Gaussian convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npNbinomLnorm <- function(q,mu,size,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      res = sum(plnorm(q-rd.p,mug, sigmag)*dnbinom(rd.p,size=size,mu = mu))\n   }\n   if(length(q)>1){\n      res = sapply(q,function(x) sum(plnorm(x-rd.p,mug,sigmag)*dnbinom(rd.p,size=size,mu = mu)))\n   }\n   return(res)\n}\n\n#' Negative binomial and Log-Gaussian convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqNbinomLnorm <- function(p,mu,size,mug,sigmag){\n   if(length(mu)==1){\n      sample = rNbinomLnorm(100000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p)\n   }\n   if(length(mu)>1){\n      q=NULL\n      for(i in 1:length(mu)){\n         sample = rNbinomLnorm(100000,mu[i],size[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p))\n      }\n\n   }\n   return(q)\n\n}\n\n#### CoMP / Lnorm ####\n\n#' CoMP and Log-Gaussian convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrCoMPoissonLnorm <- function(N,mu,size,mug,sigmag){\n   if(length(mu)==1){\n      rnb.sim = rcomp(N,nu=size,lam=mu)\n   }else{\n      rnb.sim = apply(cbind(mu,size), 1, function(x) rcomp(N/length(mu),lam = x[1],nu=x[2]))\n   }\n   LOS.sim = c(t(rnb.sim)) + rlnorm(N,mug,sigmag)\n\n\n   return(LOS.sim)\n\n}\n\n#' CoMP and Log-Gaussian convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npCoMPoissonLnorm <- function(q,mu,size,mug,sigmag){\n  l=1.5\n  rd.p = 0:200\n  if(length(q)==1){\n    res = sum(plnorm(q-rd.p,mug, sigmag)*dcomp(rd.p,nu=size,lam = mu,sumTo = 50), na.rm=T)\n  }\n  if(length(q)>1){\n    x=q\n    res = sapply(x,function(x) sum(plnorm(x-rd.p,mug,sigmag)*dcomp(rd.p,nu=size,lam = mu,sumTo = 50), na.rm=T))\n  }\n  return(res)\n}\n\n#' CoMP and Log-Gaussian convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqCoMPoissonLnorm <- function(p,mu,size,mug,sigmag){\n\n   if(length(mu)==1){\n      sample = rCoMPoissonLnorm(10000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(mu)>1){\n      q = NULL\n      for(i in 1:length(mu)){\n         sample = rCoMPoissonLnorm(10000,mu[i],size[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n   return(q)\n\n}\n\n#### ZIP / Lnorm ####\n\n#' ZIP and Log-Gaussian convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrZIPLnorm <- function(N,mu,size,mug,sigmag){\n   zip = rbinom(N,1,size)\n   rnb.sim = rpois(N,mu)\n   rnb.sim[which(zip == 1)] = 0\n   LOS.sim = rnb.sim + rlnorm(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' ZIP and Log-Gaussian convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npZIPLnorm <- function(q,mu,size,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      res = sum(plnorm(q-rd.p,mug, sigmag)*dZIP(rd.p, mu, size))\n   }\n   if(length(q)>1){\n      x=q\n      res = sapply(x,function(x) sum(plnorm(x-rd.p,mug,sigmag)*dZIP(rd.p, mu, size)))\n   }\n   return(res)\n}\n\n#' ZIP and Log-Gaussian convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqZIPLnorm <- function(p,mu,size,mug,sigmag){\n\n   if(length(mu)==1){\n      sample = rZIPLnorm(100000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(mu)>1){\n      q = NULL\n      for(i in 1:length(mu)){\n         sample = rZIPLnorm(100000,mu[i],sigma[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n   return(q)\n\n}\n\n#### Binom / Lnorm ####\n\n#' Binomial and Log-Gaussian convolution\n#' @param N sample size\n#' @param prob parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrBinomLnorm <- function(N,prob,size,mug,sigmag){\n   rb.sim = rbinom(N,size=size,prob=prob)\n   LOS.sim = rb.sim + rlnorm(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' Binomial and Log-Gaussian convolution\n#' @param q quantiles\n#' @param prob parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npBinomLnorm <- function(q,prob,size,mug,sigmag){\n\n  rd.p = 0:max(20,size)\n  if(length(q)==1){\n    res = sum(plnorm(q-rd.p,mug, sigmag)*dbinom(rd.p,size=size,prob = prob))\n  }\n\n  if(length(q)>1){\n    res = sapply(q,function(x) sum(plnorm(x-rd.p,mug,sigmag)*dbinom(rd.p,size=size,prob = prob)))\n  }\n  return(res)\n}\n\n#' Binomial and Log-Gaussian convolution\n#' @param p probabilities\n#' @param prob parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqBinomLnorm <- function(p,prob,size,mug,sigmag){\n\n   if(length(size)==1){\n      sample = rBinomLnorm(100000,size,prob,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(size)>1){\n      q = NULL\n      for(i in 1:length(size)){\n         sample = rBinomLnorm(100000,size[i],prob[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n\n   return(q)\n\n}\n\n############################## Gamma ################################\n\n#### Pois / Gamma ####\n\n#' Poisson and Gamma convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrPoisGamma <- function(N,mu,size,mug,sigmag){\n   rnb.sim = rpois(N,mu)\n   LOS.sim = rnb.sim + rgamma(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' Poisson and Gamma convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npPoisGamma <- function(q,mu,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      x=seq(0,q,0.1)\n      res = lapply(x,function(x) sum(dgamma(x-rd.p,mug, sigmag)*dpois(rd.p,mu)))\n      #res = sum(unlist(lapply(res,function(x) max(x,10^(-300))))*0.1)\n      res = sum(sapply(res,function(x) max(x,10^(-300)))*0.1)\n   }\n   if(length(q)>1){\n      res = NULL\n      for(j in 1:length(q)){\n         x=seq(0,q[j],0.1)\n         res.i = lapply(x,function(x) sum(dgamma(x-rd.p,mug,sigmag)*dpois(rd.p,mu)))\n         res.i = sum(unlist(lapply(res.i,function(x) max(x,10^(-300))))*0.1)\n         res.i = sum(sapply(res.i,function(x) max(x,10^(-300)))*0.1)\n         res = c(res,res.i)\n      }\n   }\n   return(res)\n\n}\n\n#' Poisson and Gamma convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqPoisGamma <- function(p,mu,size,mug,sigmag){\n\n   if(length(mu)==1){\n      sample = rPoisGamma(100000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(mu)>1){\n      q = NULL\n      for(i in 1:length(mu)){\n         sample = rPoisGamma(100000,mu[i],sigma[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n   return(q)\n\n}\n\n#### Nbinom / Gamma ####\n\n#' Negative binomial and Gamma convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrNbinomGamma <- function(N,mu,size,mug,sigmag){\n   rnb.sim = rnbinom(N,size=size,mu=mu)\n   LOS.sim = rnb.sim + rgamma(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' Negative binomial and Gamma convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npNbinomGamma <- function(q,mu,size,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      res = sum(pgamma(q-rd.p,mug, sigmag)*dnbinom(rd.p,size=size,mu = mu))\n   }\n   if(length(q)>1){\n      res = sapply(q,function(x) sum(pgamma(x-rd.p,mug,sigmag)*dnbinom(rd.p,size=size,mu = mu)))\n   }\n   return(res)\n}\n\n#' Negative binomial and Gamma convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqNbinomGamma <- function(p,mu,size,mug,sigmag){\n   if(length(mu)==1){\n      sample = rNbinomGamma(100000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p)\n   }\n   if(length(mu)>1){\n      q=NULL\n      for(i in 1:length(mu)){\n         sample = rNbinomGamma(100000,mu[i],size[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p))\n      }\n\n   }\n   return(q)\n\n}\n\n#### CoMP / Gamma ####\n\n#' CoMP and Gamma convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrCoMPoissonGamma <- function(N,mu,size,mug,sigmag){\n   if(length(mu)==1){\n      rnb.sim = rcomp(N,nu=size,lam=mu)\n   }else{\n      rnb.sim = apply(cbind(mu,size), 1, function(x) rcomp(N/length(mu),lam = x[1],nu=x[2]))\n   }\n   LOS.sim = c(t(rnb.sim)) + rgamma(N,mug,sigmag)\n\n\n   return(LOS.sim)\n\n}\n\n#' CoMP and Gamma convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npCoMPoissonGamma <- function(q,mu,size,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      x=seq(0,q,0.1)\n      res = lapply(x,function(x) sum(dgamma(x-rd.p,mug, sigmag)*dcom(rd.p,nu=size,lambda = mu)))\n      #res = sum(unlist(lapply(res,function(x) max(x,10^(-300))))*0.1)\n      res = sum(sapply(res,function(x) max(x,10^(-300)))*0.1)\n   }\n   if(length(q)>1){\n      res = NULL\n      for(j in 1:length(q)){\n         x=seq(0,q[j],0.1)\n         res.i = lapply(x,function(x) sum(dgamma(x-rd.p,mug,sigmag)*dcom(rd.p,nu=size,lambda = mu)))\n         res.i = sum(unlist(lapply(res.i,function(x) max(x,10^(-300))))*0.1)\n         res.i = sum(sapply(res.i,function(x) max(x,10^(-300)))*0.1)\n         res = c(res,res.i)\n      }\n   }\n   return(res)\n\n}\n\n#' CoMP and Gamma convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqCoMPoissonGamma <- function(p,mu,size,mug,sigmag){\n\n   if(length(mu)==1){\n      sample = rCoMPoissonGamma(10000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(mu)>1){\n      q = NULL\n      for(i in 1:length(mu)){\n         sample = rCoMPoissonGamma(10000,mu[i],size[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n   return(q)\n\n}\n\n#### ZIP / Gamma ####\n\n#' ZIP and Gamma convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrZIPGamma <- function(N,mu,size,mug,sigmag){\n   zip = rbinom(N,1,size)\n   rnb.sim = rpois(N,mu)\n   rnb.sim[which(zip == 1)] = 0\n   LOS.sim = rnb.sim + rgamma(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' ZIP and Gamma convolution\n#' @param q quantiles\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npZIPGamma <- function(q,mu,size,mug,sigmag){\n   l=1.5\n   rd.p = 0:200\n   if(length(q)==1){\n      res = sum(pgamma(q-rd.p,mug, sigmag)*dZIP(rd.p, mu, size))\n   }\n   if(length(q)>1){\n      x=q\n      res = sapply(x,function(x) sum(pgamma(x-rd.p,mug,sigmag)*dZIP(rd.p, mu, size)))\n   }\n   return(res)\n}\n\n#' ZIP and Gamma convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqZIPGamma <- function(p,mu,size,mug,sigmag){\n\n   if(length(mu)==1){\n      sample = rZIPGamma(100000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(mu)>1){\n      q = NULL\n      for(i in 1:length(mu)){\n         sample = rZIPGamma(100000,mu[i],sigma[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n   return(q)\n\n}\n\n#### Binom / Gamma ####\n\n#' Binomial and Gamma convolution\n#' @param N sample size\n#' @param prob parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrBinomGamma <- function(N,prob,size,mug,sigmag){\n   rb.sim = rbinom(N,size=size,prob=prob)\n   LOS.sim = rb.sim + rgamma(N,mug,sigmag)\n   return(LOS.sim)\n}\n\n#' Binomial and Gamma convolution\n#' @param q quantiles\n#' @param prob parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\npBinomGamma <- function(q,prob,size,mug,sigmag){\n\n   rd.p = 0:max(20,size)\n   if(length(q)==1){\n      x=seq(0,q,0.1)\n      res = lapply(x,function(x) sum(dgamma(x-rd.p,mug,sigmag)*dnbinom(rd.p,size=size,prob = prob)))\n      #res = sum(unlist(lapply(res,function(x) max(x,10^(-300))))*0.1)\n      res = sum(sapply(res,function(x) max(x,10^(-300)))*0.1)\n   }\n\n   if(length(q)>1){\n      res = NULL\n      for(j in 1:length(q)){\n         x=seq(0,q[j],0.1)\n         res.i = lapply(x,function(x) sum(dgamma(x-rd.p,mug,sigmag)*dnbinom(rd.p,size=size,prob =prob)))\n         #res.i = sum(unlist(lapply(res.i,function(x) max(x,10^(-300))))*0.1)\n         res.i = sum(sapply(res.i,function(x) max(x,10^(-300)))*0.1)\n         res = c(res,res.i)\n      }\n   }\n   return(res)\n\n}\n\n#' Binomial and Gamma convolution\n#' @param p probablities\n#' @param prob parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqBinomGamma <- function(p,prob,size,mug,sigmag){\n\n   if(length(size)==1){\n      sample = rBinomGamma(100000,size,prob,mug,sigmag)\n      q = quantile(sample,probs = p, na.rm=TRUE)\n   }\n   if(length(size)>1){\n      q = NULL\n      for(i in 1:length(size)){\n         sample = rBinomGamma(100000,size[i],prob[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p, na.rm=TRUE))\n      }\n\n\n\n   }\n\n   return(q)\n\n}\n\n############################ Multinom ##################################\n\n#' Mulinomial and Gaussian convolution\n#' @param x value\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @param log output on log-scale?\n#' @keywords convolution\n#' @export\ndMultinomGauss <- function(x,mu,size,mug,sigmag,log=F){\n\n   if(!is.matrix(mu)){\n     mu.u = matrix(mu,nrow=1)\n     res = dnorm(matrix(kronecker(x,0:(max(size)),\"-\"),ncol=max(size+1),byrow=T),mug,sigmag)%*%t(mu.u)}\n   if(is.matrix(mu)){res = rowSums(dnorm(matrix(kronecker(x,0:(max(size)),\"-\"),ncol=max(size+1),byrow=T),mug,sigmag)*mu)}\n   res = sapply(res,function(x) max(x,10^(-300)))\n   res[is.nan(res)] = 10^(-300)\n   if(log==T){res=log(res)}\n   return(res)\n\n}\n\n#' Mulinomial and Gaussian convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrMultinomGauss <- function(N,mu,size,mug,sigmag){\n\n   if(!is.matrix(mu)){\n      rnb.sim = sample(0:max(size),N,prob=mu, replace=T)\n   }else{\n      rnb.sim = apply(mu, 1, function(x) sample(0:max(size),1,prob=x))\n   }\n   LOS.sim = c(t(rnb.sim)) + rnorm(N,mug,sigmag)\n\n   return(LOS.sim)\n}\n\n#' Mulinomial and Gaussian convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqMultinomGauss <- function(p,mu,size,mug,sigmag){\n   if(!is.matrix(mu)){\n      sample = rMultinomGauss(10000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p)\n   }\n   if(is.matrix(mu)){\n      q=NULL\n      for(i in 1:nrow(mu)){\n         sample = rMultinomGauss(10000,mu[i,],size[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p))\n      }\n\n   }\n   return(q)\n\n}\n\n#' Mulinomial and Log-Gaussian convolution\n#' @param N sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrMultinomLnorm <- function(N,mu,size,mug,sigmag){\n\n   if(!is.matrix(mu)){\n      rnb.sim = sample(0:max(size),N,prob=mu, replace=T)\n   }else{\n      rnb.sim = apply(mu, 1, function(x) sample(0:max(size),1,prob=x))\n   }\n   LOS.sim = c(t(rnb.sim)) + rlnorm(N,mug,sigmag)\n\n   return(LOS.sim)\n}\n\n#' Mulinomial and Log-Gaussian convolution\n#' @param x value\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @param log output on log-scale?\n#' @keywords convolution\n#' @export\ndMultinomLnorm <- function(x,mu,size,mug,sigmag,log=F){\n\n   if(!is.matrix(mu)){\n     mu.u = matrix(mu,nrow=1)\n     res = dlnorm(matrix(kronecker(x,0:(max(size)),\"-\"),ncol=max(size+1),byrow=T),mug,sigmag)%*%t(mu.u)}\n   if(is.matrix(mu)){res = rowSums(dlnorm(matrix(kronecker(x,0:(max(size)),\"-\"),ncol=max(size+1),byrow=T),mug,sigmag)*mu)}\n   res = sapply(res,function(x) max(x,10^(-300)))\n   res[is.nan(res)] = 10^(-300)\n   if(log==T){res=log(res)}\n   return(res)\n\n}\n\n#' Mulinomial and Log-Gaussian convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqMultinomLnorm <- function(p,mu,size,mug,sigmag){\n   if(!is.matrix(mu)){\n      sample = rMultinomLnorm(10000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p)\n   }\n   if(is.matrix(mu)){\n      q=NULL\n      for(i in 1:nrow(mu)){\n         sample = rMultinomLnorm(10000,mu[i,],size[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p))\n      }\n\n   }\n   return(q)\n\n}\n\n\n#' Mulinomial and Gamma convolution\n#' @param N Sample size\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nrMultinomGamma <- function(N,mu,size,mug,sigmag){\n\n   if(!is.matrix(mu)){\n      rnb.sim = sample(0:max(size),N,prob=mu, replace=T)\n   }else{\n      rnb.sim = apply(mu, 1, function(x) sample(0:max(size),1,prob=x))\n   }\n   LOS.sim = c(t(rnb.sim)) + rgamma(N,mug,sigmag)\n\n   return(LOS.sim)\n}\n\n#' Mulinomial and Gamma convolution\n#' @param x value\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @param log output on log-scale?\n#' @keywords convolution\n#' @export\ndMultinomGamma <- function(x,mu,size,mug,sigmag,log=F){\n\n   if(!is.matrix(mu)){\n      mu.u = matrix(mu,nrow=1)\n      res = dlnorm(matrix(kronecker(x,0:(max(size)),\"-\"),ncol=max(size+1),byrow=T),mug,sigmag)%*%t(mu.u)}\n   if(is.matrix(mu)){res = rowSums(dgamma(matrix(kronecker(x,0:(max(size)),\"-\"),ncol=max(size+1),byrow=T),mug,sigmag)*mu)}\n   res = sapply(res,function(x) max(x,10^(-300)))\n   res[is.nan(res)] = 10^(-300)\n   if(log==T){res=log(res)}\n   return(res)\n\n}\n\n#' Mulinomial and Gamma convolution\n#' @param p probabilities\n#' @param mu parameter1-1\n#' @param size parameter1-2\n#' @param mug parameter2-1\n#' @param sigmag parameter2-2\n#' @keywords convolution\n#' @export\nqMultinomGamma <- function(p,mu,size,mug,sigmag){\n   if(!is.matrix(mu)){\n      sample = rMultinomGamma(10000,mu,size,mug,sigmag)\n      q = quantile(sample,probs = p)\n   }\n   if(is.matrix(mu)){\n      q=NULL\n      for(i in 1:nrow(mu)){\n         sample = rMultinomGamma(10000,mu[i,],size[i],mug[i],sigmag[i])\n         q = rbind(q,quantile(sample,probs = p))\n      }\n\n   }\n   return(q)\n\n}\n\n\n\n#mod: chriso: byte-code optimization of distribution function\n# dNbinomLnorm <- cmpfun(.dNbinomLnorm)\ndCoMPoissonGauss <- cmpfun(.dCoMPoissonGauss)\ndkCoMPoissonGauss <- cmpfun(.dkCoMPoissonGauss)\ndCoMPoissonLnorm <- cmpfun(.dCoMPoissonLnorm)\ndkCoMPoissonLnorm <- cmpfun(.dkCoMPoissonLnorm)\n# dkZIPGauss <- cmpfun(.dkZIPGauss)\n",
    "created" : 1484709578978.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "8|23|191|0|\n204|45|208|0|\n238|45|256|0|\n258|21|321|0|\n322|18|394|0|\n395|17|461|0|\n462|16|528|0|\n597|18|661|0|\n662|20|722|0|\n723|18|794|0|\n795|17|861|0|\n",
    "hash" : "2685692254",
    "id" : "FF16871F",
    "lastKnownWriteTime" : 1484710139,
    "last_content_update" : 1484710139249,
    "path" : "~/Documents/Donnees/Code/Package/convReg/R/distribution.R",
    "project_path" : "R/distribution.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}