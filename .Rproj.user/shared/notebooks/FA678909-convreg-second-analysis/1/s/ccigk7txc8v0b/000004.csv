"0","cvRes = convreg(formula.resp = ~ CO2, formula.mu1 =~ GNP, formula.mu2=~GNP,method = ""em"",
                data = CO2data, dist1 = ""Binom"", fixed = fixed, scale=TRUE, scaleInit = 1/max(CO2data$CO2), debug = T)
"
"1","Called from: "
"1","convreg(formula.resp = ~CO2, formula.mu1 = ~GNP, formula.mu2 = ~GNP, 
"
"1","    method = ""em"", data = CO2data, dist1 = ""Binom"", fixed = fixed, 
"
"1","    scale = TRUE, scaleInit = 1/max(CO2data$CO2), debug = T)
"
"0","y = data.matrix(model.frame(formula.resp, data = data, na.action=NULL))"
"0","if(dist1 == ""Binom"" & length(which(fixed$name == ""sigma 1: (Intercept)"")) == 0){"
"0","      fixed$name = c(fixed$name, ""sigma 1: (Intercept)"")"
"0","      fixed$value = c(fixed$value, max(1,ceiling(y)))"
"0","   }"
"0","X.mu1.model.frame = model.frame(formula.mu1,data = data,na.action=NULL, drop.unused.levels = TRUE)"
"0","X.mu1.model.terms = attr(X.mu1.model.frame,""terms"")"
"0","X.mu1 = model.matrix(X.mu1.model.terms, X.mu1.model.frame)"
"0","X.sigma1.model.frame = model.frame(formula.sigma1,data = data,na.action=NULL, drop.unused.levels = TRUE)"
"0","X.sigma1.model.terms = attr(X.sigma1.model.frame,""terms"")"
"0","X.sigma1 = model.matrix(X.sigma1.model.terms, X.sigma1.model.frame)"
"0","X.mu2.model.frame = model.frame(formula.mu2,data = data,na.action=NULL, drop.unused.levels = TRUE)"
"0","X.mu2.model.terms = attr(X.mu2.model.frame,""terms"")"
"0","X.mu2 = model.matrix(X.mu2.model.terms, X.mu2.model.frame)"
"0","X.sigma2.model.frame = model.frame(formula.sigma2,data = data,na.action=NULL, drop.unused.levels = TRUE)"
"0","X.sigma2.model.terms = attr(X.sigma2.model.frame,""terms"")"
"0","X.sigma2 = model.matrix(X.sigma2.model.terms, X.sigma2.model.frame)"
"0","theta.mu1 = rep(0.1,ncol(X.mu1))"
"0","theta.sigma1 = rep(0.1,ncol(X.sigma1))"
"0","theta.mu2 = rep(0.1,ncol(X.mu2))"
"0","theta.sigma2 = rep(0.1,ncol(X.sigma2))"
"0","fun1 = eval(parse(text=paste(""f"",transforms[1],sep="""")))"
"0","fun2 = eval(parse(text=paste(""f"",transforms[2],sep="""")))"
"0","fun3 = eval(parse(text=paste(""f"",transforms[3],sep="""")))"
"0","fun4 = eval(parse(text=paste(""f"",transforms[4],sep="""")))"
"0","if(!quiet){message(sprintf('links: [formula1: %s sigma1: %s, formula2 : %s sigma2 : %s]',"
"0","                   transforms[1],transforms[2],transforms[3],transforms[4]))}"
"0","if(dist1 == ""Pois""){fixed$name = c(fixed$name,""sigma 1: (Intercept)"")"
"0","fixed$value = c(fixed$value,0)}"
"0","theta.name = c(paste(""mu 1: "",colnames(X.mu1),sep=""""),"
"0","                  paste(""sigma 1: "",colnames(X.sigma1),sep=""""),"
"0","                  paste(""mu 2: "",colnames(X.mu2),sep=""""),"
"0","                  paste(""sigma 2: "",colnames(X.sigma2),sep=""""))"
"0","init.theta = init.theta.convreg(y,dist1,dist2,formula.mu1, formula.sigma1, formula.mu2, formula.sigma2,"
"0","                                   fixed,data,theta.name, scale, scaleInit)"
"0","idx.fixed = as.numeric(na.omit(match(fixed$name,theta.name)))"
"0","idx.var   = which(!(theta.name %in% fixed$name))"
"0","listParam = list(init.theta=init.theta,data = data,"
"0","                    formula.resp = formula.resp, formula.mu1 = formula.mu1, formula.sigma1 = formula.sigma1, formula.mu2 = formula.mu2, formula.sigma2 = formula.sigma2,"
"0","                    dist1 = dist1, dist2 = dist2,weights = weights, quiet = quiet, debug = debug,"
"0","                    X.mu1 = X.mu1, X.sigma1 = X.sigma1, X.mu2 = X.mu2, X.sigma2 = X.sigma2,y=y,"
"0","                    fun1 = fun1, fun2 = fun2, fun3=fun3,fun4=fun4,"
"0","                    idx.fixed = idx.fixed, idx.var = idx.var,fixed = fixed,"
"0","                    scale = scale, scaleInit = scaleInit)"
"0","res = fitConvreg(listParam,method)"
"2","Error in 0:maxK : NA/NaN argument
"
