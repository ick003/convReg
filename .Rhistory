length(x.sort)
plot(x.ks)
x = x.ks
x = x.ks[14]
x
n=200
j <- seq.int(from = 0, to = floor(n * (1 - x)))
j
1 - x * sum(exp(lchoose(n, j) + (n - j) * log(1 - x - j/n) + (j - 1) * log(x + j/n)))
dks(x.ks[14], 200)
dks(x.ks[13], 200)
dks(x.ks[12], 200)
dks(x.ks[12:13], 200)
dks(x.ks[1:13], 200)
dks(x.ks[1:14], 200)
dks(x.ks[1:20], 200)
dks(x.ks[1:15], 200)
dks(x.ks[15], 200)
x.ks[15]
x=x.ks[15]
j <- seq.int(from = 0, to = floor(n * (1 - x)))
j
1 - x * sum(exp(lchoose(n, j) + (n - j) * log(1 - x - j/n) + (j - 1) * log(x + j/n)))
lchoose(n, j)
j/n
x - j/n
log(1 - x - j/n)
1 - x
j/n
(n - j) * log(1 - x - j/n)
(j - 1) * log(x + j/n)
j
xj = x + j/n
xj
xj[which.min(xj)]
max(min(xj), 0.001)
xj[which.max(xj)] <- min(max(xj), 0.9999)
xj
1 - x * sum(exp(lchoose(n, j) + (n - j) * log(1 - (xj)) + (j - 1) * log(xj)))
library(convReg)
plot(x.ks[2:length(x.ks)], dks(x.ks, length(x.sort)), type = "l", ylab = "pdf", xlab = "statistic")
abline(v = testdist$df$statistic[3], col = "blue", lwd = 2)
plotTestdist(td)
td = testdist(y$obs, dist1 = "Binom", dist2 = "Lnorm")
plotTestdist(td)
td = testdist(y$obs, dist1 = "Binom", dist2 = "Gauss")
plotTestdist(td)
td
td = testdist(y$obs, dist1 = "Pois", dist2 = "Lnorm")
plotTestdist(td)
dist1 = "Pois"
dist2 = "Lnorm"
y.obs = y$obs
n = length(y.obs)
if(n > 500){n = 500}
dat.temp = data.frame(obs = y.obs[sample(1:length(y.obs), n)])
cv = convreg(~obs, dist1 = dist1, dist2 = dist2, data = dat.temp)
dist1
dist2
cv = convreg(formula.resp = ~obs, dist1 = dist1, dist2 = dist2, data = dat.temp)
dat.temp
dat.temp$obs
cv = convreg(formula.resp = ~obs, dist1 = dist1, dist2 = dist2, data = dat.temp)
x1 = rnorm(n,3,0.5)
x2 = runif(n,-2,1)
k= rpois(n,exp(-exp(x2)))
e=x1+rnorm(n=n,mean=0,sd=0.25)
y= data.frame(obs=(k + e) , f1 = x1, f2 = x2)
par(mfrow = c(1,1), mar = c(5,4,4,2))
hist(y$obs, breaks = seq(min(y$obs)-1, max(y$obs)+1, length.out = n/20), xlim = c(min(y$obs)-1, max(y$obs)+1))
hist(y$obs, breaks = seq(min(y$obs)-1, max(y$obs)+1, length.out = n/2), xlim = c(min(y$obs)-1, max(y$obs)+1))
hist(y$obs, breaks = seq(min(y$obs)-1, max(y$obs)+1, length.out = n/5), xlim = c(min(y$obs)-1, max(y$obs)+1))
dist1 = "Binom";dist2 = "Gauss"
dist1 = "Pois";dist2 = "Gauss"
res.reg.em =convreg( ~obs,
formula.mu1 =~ f2,
formula.mu2 =~ f1,
data=y,dist1 = dist1,
method = "mle")
res.reg.em =convreg( ~obs,
formula.mu1 =~ f2,
formula.mu2 =~ f1,
data=y,
dist1 = dist1,
dist2 = dist2,
method = "mle")
bS = BICselect(df = y, formula.resp = ~obs, idx.pred = 2:3, dist1 = dist1, dist2 = dist2)
dS
bS
td = testdist(y$obs, dist1 = dist1, dist2 = dist2)
plotTestdist(td)
td = testdist(y$obs, dist1 = dist1, dist2 = "Lnorm")
dist1 = "Pois";dist2 = "Lnorm"
res.reg.em =convreg( ~obs,
formula.mu1 =~ f2,
formula.mu2 =~ f1,
data=y,
dist1 = dist1,
dist2 = dist2,
method = "mle")
dist1 = "Nbinom";dist2 = "Lnorm"
res.reg.em =convreg( ~obs,
formula.mu1 =~ f2,
formula.mu2 =~ f1,
data=y,
dist1 = dist1,
dist2 = dist2,
method = "mle")
dist1 = "CoMPoisson";dist2 = "Lnorm"
res.reg.em =convreg( ~obs,
formula.mu1 =~ f2,
formula.mu2 =~ f1,
data=y,
dist1 = dist1,
dist2 = dist2,
method = "mle")
dist1 = "Pois";dist2 = "Lnorm"
res.reg.em =convreg( ~obs,
formula.mu1 =~ f2,
formula.mu2 =~ f1,
data=y,
dist1 = dist1,
dist2 = dist2,
method = "mle")
library(convReg)
bS = BICselect(df = y, formula.resp = ~obs, idx.pred = 2:3, dist1 = dist1, dist2 = dist2)
dist1 = "Pois";dist2 = "Gauss"
res.reg.em =convreg( ~obs,
formula.mu1 =~ f2,
formula.mu2 =~ f1,
data=y,
dist1 = dist1,
dist2 = dist2,
method = "mle")
td = testdist(y$obs, dist1 = dist1, dist2 = dist2)
plotTestdist(td)
td = testdist(y$obs, dist1 = dist1, dist2 = "Lnorm")
plotTestdist(td)
summary(res.reg.em)
dist1 = "Pois";dist2 = "Lnorm"
res.reg.em =convreg( ~obs,
formula.mu1 =~ f2,
formula.mu2 =~ f1,
data=y,
dist1 = dist1,
dist2 = dist2,
method = "mle")
td = testdist(y$obs, dist1 = dist1, dist2 = dist2)
plotTestdist(td)
summary(res.reg.em)
plot(res.reg.em)
regplot(res.reg.em)
distplot(res.reg.em)
cdfplot(res.reg.em)
obj = res.reg.em
obj = x
res = quantRes(obj)
obj = res.reg.em
res = quantRes(obj)
par(mfrow = c(2,2))
qq_ci(res)
hist(res, xlab = "Randomized Quantile Residuals", ...)
plot(obj$fitted, res, main="Residuals vs Fitted",
xlab = "Fitted", ylab = "Randomized Quantile Residuals")
plot(obj$data[,1],res, main="Residuals vs Observed",
xlab = "Observed", ylab = "Randomized Quantile Residuals")
p = predict(obj)
p
library(convReg)
plot(res.reg.em)
summary(res.reg.em)
e=x1+rlnorm(n=n,mean=0,sd=0.25)
y= data.frame(obs=(k + e) , f1 = x1, f2 = x2)
par(mfrow = c(1,1), mar = c(5,4,4,2))
hist(y$obs, breaks = seq(min(y$obs)-1, max(y$obs)+1, length.out = n/5), xlim = c(min(y$obs)-1, max(y$obs)+1))
dist1 = "Pois";dist2 = "Lnorm"
res.reg.em =convreg( ~obs,
formula.mu1 =~ f2,
formula.mu2 =~ f1,
data=y,
dist1 = dist1,
dist2 = dist2,
method = "mle")
bS = BICselect(df = y, formula.resp = ~obs, idx.pred = 2:3, dist1 = dist1, dist2 = dist2)
td = testdist(y$obs, dist1 = dist1, dist2 = dist2)
plotTestdist(td)
summary(res.reg.em)
plot(res.reg.em)
regplot(res.reg.em)
distplot(res.reg.em)
cdfplot(res.reg.em)
summary(res.reg.em)
plot(res.reg.em)
dist1= unlist(strsplit(obj$distname,"/"))[1]
dist2= unlist(strsplit(obj$distname,"/"))[2]
delta = 0.5
disp = "all"
cex.pt = 0.5
p = predict(obj)
idx.boot = sample(1:length(p$y), length(p$y), replace=T)
variables = unlist(lapply(obj$formulas, all.vars))
variables = variables[variables %in% names(obj$data)]
names(variables)[grep("mu1",names(variables))] <- paste0(dist1,"")
names(variables)[grep("mu2",names(variables))] <- paste0(dist2,"")
names(variables)[grep("sigma1",names(variables))] <- paste0(dist1,"")
names(variables)[grep("sigma2",names(variables))] <- paste0(dist2,"")
names = names(variables)
variables = unique(variables)
par(mfrow = c(1,1))
nb.plot.final = length(variables)
if(disp=="all"){
par(mfrow=c(max(round(sqrt(nb.plot.final)),1),max(round(sqrt(nb.plot.final+2)),1)))
if(nb.plot.final==1){par(mfrow = c(1,1))}
}
ii=1
var.x = obj$data[,which(names(obj$data) %in% variables[ii])]
var.x
bp = is.factor(var.x)
if(bp){
init.levels = levels(var.x)
tb = table(var.x)
idx.ch = which(var.x %in% names(which(tb <=2)))
if(length(idx.ch)>0){
var.x[idx.ch] = sample(setdiff(levels(var.x), names(which(tb <=2))), length(idx.ch))
var.x = as.factor(as.character(var.x))
}
corr.levels = levels(var.x)
}
reg = marginalReg(obj, name.reg = variables[ii], bp)
pred = reg$value
calc.m.s = meanVarianceConvreg(mu1 = pred$mu1, sigma1 = pred$s1, mu2 = pred$mu2, sigma2 = pred$s2,
dist1 = obj$profile.lik$other[[16]], dist2 = obj$profile.lik$other[[17]])
y.p = calc.m.s[[1]]
y.q = eval(parse(text = sprintf("t(matrix(q%s%s(c(0.1,0.25,0.75,0.9), pred$mu1,pred$s1, pred$mu2,pred$s2), ncol=4))", dist1, dist2)))
plot(pred$x, y.p,type="l", ylim = range(p$y),col = rgb(0,0,0,0.3), xlab = variables[ii], ylab = "", ...)
plot(pred$x, y.p,type="l", ylim = range(p$y),col = rgb(0,0,0,0.3), xlab = variables[ii], ylab = ""
)
polygon(c(pred$x,rev(pred$x)),
c(y.q[1,],rev(y.q[4,])),col = rgb(0,0,0,0.1),border=NA)
polygon(c(pred$x,rev(pred$x)),
c(y.q[2,],rev(y.q[3,])),col = rgb(0,0,0,0.2),border=NA)
points(var.x, p$y, cex = cex.pt , pch = 3)
pred$x
y.p
y.p
calc.m.s
pred
pred$mu1
obj$transforms
res.reg.em$transforms
library(convReg)
regplot(res.reg.em)
reg = marginalReg(obj, name.reg = variables[ii], bp)
pred = reg$value
calc.m.s = meanVarianceConvreg(mu1 = pred$mu1, sigma1 = pred$s1, mu2 = pred$mu2, sigma2 = pred$s2,
dist1 = obj$profile.lik$other[[16]], dist2 = obj$profile.lik$other[[17]])
y.p = calc.m.s[[1]]
y.q = eval(parse(text = sprintf("t(matrix(q%s%s(c(0.1,0.25,0.75,0.9), pred$mu1,pred$s1, pred$mu2,pred$s2), ncol=4))", dist1, dist2)))
plot(pred$x, y.p,type="l", ylim = range(p$y),col = rgb(0,0,0,0.3), xlab = variables[ii], ylab = "", ...)
plot(pred$x, y.p,type="l", ylim = range(p$y),col = rgb(0,0,0,0.3), xlab = variables[ii], ylab = ""
)
polygon(c(pred$x,rev(pred$x)),
c(y.q[1,],rev(y.q[4,])),col = rgb(0,0,0,0.1),border=NA)
polygon(c(pred$x,rev(pred$x)),
c(y.q[2,],rev(y.q[3,])),col = rgb(0,0,0,0.2),border=NA)
points(var.x, p$y, cex = cex.pt , pch = 3)
calc.m.s[[1]]
pred$mu2
mean(rlnorm(1000,1.1,1))
pred$s2
mean(rlnorm(1000,1.1,0.1))
mean(rlnorm(1000,1.109,0.1))
mean(rlnorm(1000,1.109,0.103))
library(convReg)
calc.m.s = meanVarianceConvreg(mu1 = pred$mu1, sigma1 = pred$s1, mu2 = pred$mu2, sigma2 = pred$s2,
dist1 = obj$profile.lik$other[[16]], dist2 = obj$profile.lik$other[[17]])
y.p = calc.m.s[[1]]
y.q = eval(parse(text = sprintf("t(matrix(q%s%s(c(0.1,0.25,0.75,0.9), pred$mu1,pred$s1, pred$mu2,pred$s2), ncol=4))", dist1, dist2)))
plot(pred$x, y.p,type="l", ylim = range(p$y),col = rgb(0,0,0,0.3), xlab = variables[ii], ylab = "")
polygon(c(pred$x,rev(pred$x)),
c(y.q[1,],rev(y.q[4,])),col = rgb(0,0,0,0.1),border=NA)
polygon(c(pred$x,rev(pred$x)),
c(y.q[2,],rev(y.q[3,])),col = rgb(0,0,0,0.2),border=NA)
points(var.x, p$y, cex = cex.pt , pch = 3)
calc.m.s
y.p
exp(mu2* + sigma2/2)
exp(pred$mu2* + pred$sigma2/2)
exp(pred$mu2* + pred$s2/2)
exp(pred$mu2* + pred$s2^(1/2)/2)
pred$mu1
pred$mu2
mean(rlnorm(1000,1.109,0.103))
exp(1.10 + 0.103/2)
exp(1.10 + 0.103^2/2)
exp(1.10 + 0.103^2/2) + pred$mu1
obj$profile.lik$other[[16]]
obj$profile.lik$other[[17]]
library(convReg)
calc.m.s = meanVarianceConvreg(mu1 = pred$mu1, sigma1 = pred$s1, mu2 = pred$mu2, sigma2 = pred$s2,
dist1 = obj$profile.lik$other[[16]], dist2 = obj$profile.lik$other[[17]])
calc.m.s
pred$mu1
pred$mu2
pred$s2
dist2 %in% "Lnorm"
exp(mu2* + sigma2^2/2)
exp(pred$mu2* + pred$sigma2^2/2)
exp(pred$mu2* + pred$s2^2/2)
pred$mu2
pred$s2
library(convReg)
calc.m.s = meanVarianceConvreg(mu1 = pred$mu1, sigma1 = pred$s1, mu2 = pred$mu2, sigma2 = pred$s2,
dist1 = obj$profile.lik$other[[16]], dist2 = obj$profile.lik$other[[17]])
y.p = calc.m.s$mean
y.q = eval(parse(text = sprintf("t(matrix(q%s%s(c(0.1,0.25,0.75,0.9), pred$mu1,pred$s1, pred$mu2,pred$s2), ncol=4))", dist1, dist2)))
plot(pred$x, y.p,type="l", ylim = range(p$y),col = rgb(0,0,0,0.3), xlab = variables[ii], ylab = "")
polygon(c(pred$x,rev(pred$x)),
c(y.q[1,],rev(y.q[4,])),col = rgb(0,0,0,0.1),border=NA)
polygon(c(pred$x,rev(pred$x)),
c(y.q[2,],rev(y.q[3,])),col = rgb(0,0,0,0.2),border=NA)
points(var.x, p$y, cex = cex.pt , pch = 3)
if(!bp){
y.p = calc.m.s$mean
y.q = eval(parse(text = sprintf("t(matrix(q%s%s(c(0.1,0.25,0.75,0.9), pred$mu1,pred$s1, pred$mu2,pred$s2), ncol=4))", dist1, dist2)))
plot(pred$x, y.p,type="l", ylim = range(p$y),col = rgb(0,0,0,0.3), xlab = variables[ii], ylab = "")
#, ...)
polygon(c(pred$x,rev(pred$x)),
c(y.q[1,],rev(y.q[4,])),col = rgb(0,0,0,0.1),border=NA)
polygon(c(pred$x,rev(pred$x)),
c(y.q[2,],rev(y.q[3,])),col = rgb(0,0,0,0.2),border=NA)
points(var.x, p$y, cex = cex.pt , pch = 3)
}
regplot(res.reg.em)
td = testdist(y$obs, dist1 = dist1, dist2 = dist2)
plotTestdist(td)
td
y.obs = y$obs
dist1 = "Pois";dist2 = "Lnorm"
n = length(y.obs)
if(n > 500){n = 500}
dat.temp = data.frame(obs = y.obs[sample(1:length(y.obs), n)])
cv = convreg(formula.resp = ~obs, dist1 = dist1, dist2 = dist2, data = dat.temp)
cv
plot(cv)
distplot(cv)
distplot(cv, 100)
distplot(cv, delta=0.1)
distplot(cv, delta=0.5)
res = y.obs
by.o = diff(range(res)) / (length(c(res))/20)
seq.o = seq(min(res)-by.o, max(res)+by.o, by=by.o)
O = sapply(seq.o, function(x) sum(res <= x))
O[2:length(seq.o)] = O[2:length(seq.o)] - O[1:(length(seq.o)-1)]
idx.O = which(O > 2)
O = O[idx.O]
x.o = seq.o[idx.O]
mu1 = cv$transform[[1]](coef(cv)$theta_mu1)
sigma1 = cv$transform[[2]](coef(cv)$theta_sigma1)
mu2 = cv$transform[[3]](coef(cv)$theta_mu2)
sigma2 = cv$transform[[4]](coef(cv)$theta_sigma2)
if(dist1 == "Pois"){
E =  eval(parse(text = sprintf("p%s%s(seq.o, mu1, mu2, sigma2)", dist1, dist2)))
}else{
E =  eval(parse(text = sprintf("p%s%s(seq.o, mu1, sigma1,mu2, sigma2)", dist1, dist2)))
}
E = E * length(res)
E[2:length(seq.o)] = E[2:length(seq.o)] - E[1:(length(seq.o)-1)]
E = E[idx.O]
chi.stat = sum((O[E>0]-E[E>0])^2 / E[E>0])
df.chi = max(length(E[E>0])-4,1)
p.val.chi <- 1-pchisq(chi.stat,df = df.chi)
p.val.chi
df.chi
chi.stat
O
E
mu1
mu2
cv$transform[[3]]
sigma2
E
seq.o
dist1
dist2
g.stat = sum( 2 * O * log(O / E))
p.val.g <- 1-pchisq(g.stat,df = df.chi)
g.stat
p.val.g
if(dist1 == "Pois"){
ks.stat =  eval(parse(text = sprintf("ks.test(res, p%s%s, mu1, mu2, sigma2)", dist1, dist2)))
}else{
ks.stat =  eval(parse(text = sprintf("ks.test(res, p%s%s, mu1, sigma1,mu2, sigma2)", dist1, dist2)))
}
ks.stat
ks.stat =  eval(parse(text = sprintf("ks.test(res, p%s%s, mu1, mu2, sigma2)", dist1, dist2)))
ks.stat
ks.stat =  eval(parse(text = sprintf("ks.test(res, p%s%s, mu1, sigma1,mu2, sigma2)", dist1, dist2)))
pPoisLnorm
pPoisLnorm(2:8, mu1,mu2,sigma2)
pnorm(-5:5,0,1)
pPoisLnorm(2:80, mu1,mu2,sigma2)
pPoisGauss(2:80, mu1,mu2,sigma2)
pPoisGauss(2:12, mu1,mu2,sigma2)
pPoisLnorm(2:12, mu1,mu2,sigma2)
library(convReg)
pPoisLnorm(2:12, mu1,mu2,sigma2)
E =  eval(parse(text = sprintf("p%s%s(seq.o, mu1, mu2, sigma2)", dist1, dist2)))
E = E * length(res)
E[2:length(seq.o)] = E[2:length(seq.o)] - E[1:(length(seq.o)-1)]
E = E[idx.O]
chi.stat = sum((O[E>0]-E[E>0])^2 / E[E>0])
df.chi = max(length(E[E>0])-4,1)
p.val.chi <- 1-pchisq(chi.stat,df = df.chi)
chi.stat
df.chi
p.val.chi
g.stat = sum( 2 * O * log(O / E))
p.val.g <- 1-pchisq(g.stat,df = df.chi)
if(dist1 == "Pois"){
ks.stat =  eval(parse(text = sprintf("ks.test(res, p%s%s, mu1, mu2, sigma2)", dist1, dist2)))
}else{
ks.stat =  eval(parse(text = sprintf("ks.test(res, p%s%s, mu1, sigma1,mu2, sigma2)", dist1, dist2)))
}
test.df = data.frame("statistic" = c(chi.stat, g.stat, ks.stat$statistic), "df" = c(df.chi, df.chi, NA), "p-value" = c(p.val.chi, p.val.g, ks.stat$p.value))
rownames(test.df) <- c("Chi-2 test", "G-test", "KS test")
RET = list(df = test.df,E = E,O = O,x.O = x.o, dist1 = dist1, dist2 = dist2, ks.list = list(res,mu1,sigma1,mu2,sigma2))
test.df
td = testdist(y$obs, dist1 = dist1, dist2 = dist2)
plotTestdist(td)
td = testdist(y$obs, dist1 = dist1, dist2 = "Gauss")
plotTestdist(td)
td
library(convReg)
td = testdist(y$obs, dist1 = "Binom", dist2 = "Gauss")
plotTestdist(td)
td
y.obs = y$obs
n = length(y.obs)
if(n > 500){n = 500}
dat.temp = data.frame(obs = y.obs[sample(1:length(y.obs), n)])
cv = convreg(formula.resp = ~obs, dist1 = dist1, dist2 = dist2, data = dat.temp)
cv
summary(cv)
dist1
dist1 = "Binom"
cv = convreg(formula.resp = ~obs, dist1 = dist1, dist2 = dist2, data = dat.temp)
cv
summary(cv)
library(convReg)
td = testdist(y$obs, dist1 = "Binom", dist2 = "Gauss",fixed=list(name = "sigma 1: (Intercept)", value = 2))
td = testdist(y$obs, dist1 = "Binom", dist2 = "Gauss",fixed=list(name = "sigma 1: (Intercept)", value = 2),method = "em",
scale=T, scaleInit = max(y$obs)/2)
plotTestdist(td)
td
n = 200
set.seed(123)
x1 = rnorm(n,3,0.5)
x2 = runif(n,-2,1)
k= rbinom(n,prob=exp(-exp(x2)),size=2)
e=x1+rnorm(n=n,mean=0,sd=0.25)
y= data.frame(obs=(k + e) , f1 = x1, f2 = x2)
par(mfrow = c(1,1), mar = c(5,4,4,2))
hist(y$obs, breaks = seq(min(y$obs)-1, max(y$obs)+1, length.out = n/20), xlim = c(min(y$obs)-1, max(y$obs)+1))
dist1 = "Binom";dist2 = "Gauss"
fixed=list(name = "sigma 1: (Intercept)", value = 2)
td = testdist(y$obs, dist1 = "Binom", dist2 = "Gauss",fixed=list(name = "sigma 1: (Intercept)", value = 2),method = "em",
scale=T, scaleInit = max(y$obs)/2)
plotTestdist(td)
td
td = testdist(y$obs, dist1 = "Binom", dist2 = "Gauss",fixed=list(name = "sigma 1: (Intercept)", value = 2))
td = testdist(y$obs, dist1 = "Binom", dist2 = "Gauss",fixed=list(name = "sigma 1: (Intercept)", value = 3),method = "em",
scale=T, scaleInit = max(y$obs)/2)
plotTestdist(td)
td = testdist(y$obs, dist1 = "Binom", dist2 = "Gauss",fixed=list(name = "sigma 1: (Intercept)", value = 3),method = "em",
scale=T, scaleInit = max(y$obs)/3)
plotTestdist(td)
devtools::document()
devtools::document()
library(convReg)
set.seed(123)
e=0.75+rnorm(n=500,mean=0,sd=0.25)
x1 = rnorm(500,0,0.5)
x2 = runif(500,-2,1)
k= rnbinom(500,mu=exp(x2),size=1.5)
y= data.frame(obs=(k + e) , f1 = x1, f2 = x2)
par(mfrow = c(1,1), mar = c(5,4,4,2))
hist(y$obs, breaks = seq(min(y$obs)-1.5, max(y$obs)+3, 3), xlim = c(0,14*24))
res.reg.em =convreg( ~obs,
formula.mu1 =~ f2,
formula.mu2 =~ f1,
data=y,
dist1 = "Nbinom",
method = "mle")
res.reg.em
summary(res.reg.em)
distplot(res.reg.em, delta=3, xlim=c(0,200))
devtools::check()
devtools::check()
idx.pred = c(2)
dist1 = "ZIP"
dist2 = "Gauss"
res= BICselect(df = PatientAdmission[sample(1:nrow(PatientAdmission),100),], formula.resp = ~ LOS.total, idx.pred = idx.pred, dist1 = dist1, dist2 = dist2, quiet = F, formulas = "all")
head(res)
cvRes = convreg(formula.resp = ~ LOS.total, formula.mu1 = as.formula(as.character(res$formula1[1])),
formula.sigma1 = as.formula(as.character(res$formula11[1])),
formula.mu2= as.formula(as.character(res$formula2[1])), method = "mle",  dist1 = "ZIP",
data = PatientAdmission, debug = F)
summary(cvRes)
devtools::check()
devtools::check()
devtools::check()
